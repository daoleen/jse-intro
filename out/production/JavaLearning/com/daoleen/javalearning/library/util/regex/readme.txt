Пакет java.util.regex поддерживает обработку регулярных выражений.
Существуют два класса поддерживающих обработку регулярных выражений - Pattern и Matcher.
Эти классы работают вместе. Класс Pattern применяется для задания регулярного выражения.
Сопоставление шаблона с последовательностью символов реализуется с помощью класса Matcher.

Pattern.
В классе Pattern нет определений конструкторов. Шаблон формируется с помощью вызова фабричного метода:
    static Pattern compile(String template)
Этот метод преобразует строку template в шаблон, который можно использовать для сопоставления, осуществляемого
с помощью класса Matcher. После того, как объект Pattern создан, с его помощью нужно создать объект класса
Matcher. Для этого нужно вызвать фабричный метод:
    Matcher matcher(CharSequence string)
Здесь string - это последовательность символов, которая будет сопоставляться с шаблоном. Она называется входной
последовательностью. Интерфейс CharSequence определяет набор символов только для чтения. Он также реализуется
классом String, поэтому можно туда передать также объект класса String.

Matcher.
В классе Matcher нет определений конструкторов. Объект класса Matcher создается при помощи вызова фабричного
метода matcher(..), определяемого в классе Pattern.
Самым простым методом сопоставления с шаблоном является метод:
    boolean matches()
Он вернет true, если последовательность и шаблон совпадают.
- Чтобы определить, совпадает ли ПОДПОследовательноть с входящей последовательностью, используется метод find().
Метод find() можно вызывать неоднократно, и находить все совпадающие подпоследовательности. При каждом вызове
метода find() сравнение начинается с того места, где было закончено предыдущее.
- Строку, содержащую последнюю совпавшую последовательность, можно получить с помощью метода group().
- С помощью метода int start() можно получить индекс внутри входной последовательности текущего совпадения.
- Индекс, следующий за окончанием текущего совпадения, можно получить с помощью метода int end()
- Каждую совпавшую последовательность можно заменить другой последовательностью, если вызвать метод String replaceAll(String newStr)